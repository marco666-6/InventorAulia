@model Invenion.Models.ViewModels.LoginViewModel
@{
    Layout = "";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Invenion - Login</title>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <!-- Custom CSS -->
    <link rel="stylesheet" href="~/css/login.css" asp-append-version="true" />
    <!-- Third-party CSS -->
    <link rel="stylesheet" href="~/lib/sweetalert2/dist/sweetalert2.min.css" />
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>

    <!-- Custom CSS untuk warna hijau -->
    <style>
        .text-green {
            color: #28a745 !important; /* Hijau Bootstrap */
        }
        /* Atau gunakan warna hijau custom */
        .text-custom-green {
            color: #00a65a !important; /* Hijau custom */
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="login-card">
            <!-- Header -->
            <div class="login-header">
                <div class="logo-container">
                    <i class='bx bx-devices' style="color: #003200;"></i>
                    <h2>Invenion</h2>
                </div>
                <p class="login-subtitle">Device Management System</p>
            </div>

            <!-- Login Form -->
            <form asp-action="Index" method="post" class="needs-validation" novalidate>
                @Html.AntiForgeryToken()

                <div class="form-group">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class='bx bx-user'></i>
                        </span>
                        <input asp-for="Username"
                               class="form-control"
                               placeholder="Username"
                               required
                               autocomplete="username" />
                    </div>
                    <span asp-validation-for="Username" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class='bx bx-lock-alt'></i>
                        </span>
                        <input asp-for="Password"
                               type="password"
                               class="form-control"
                               placeholder="Password"
                               required
                               autocomplete="current-password" />
                        <button type="button" class="btn btn-outline-secondary password-toggle" tabindex="-1">
                            <i class='bx bx-hide'></i>
                        </button>
                    </div>
                    <span asp-validation-for="Password" class="text-danger"></span>
                </div>

                <div class="form-options">
                    <a href="@Url.Action("ForgotPassword")" class="forgot-password-link">
                        Forgot Password?
                    </a>
                </div>

                <button type="submit" class="btn btn-primary btn-login">
                    <i class='bx bx-log-in'></i>
                    Sign In
                </button>

                <div class="login-footer">
                    <p>
                        Don't have an account?
                        <a href="@Url.Action("Register")" class="register-link">Register here</a>
                    </p>
                </div>
            </form>
        </div>

        <!-- Background Animation -->
        <div class="background-animation">
            <div class="floating-icon" style="--delay: 0s;">
                <i class='bx bx-laptop'></i>
            </div>
            <div class="floating-icon" style="--delay: 2s;">
                <i class='bx bx-mobile-alt'></i>
            </div>
            <div class="floating-icon" style="--delay: 4s;">
                <i class='bx bx-desktop'></i>
            </div>
            <div class="floating-icon" style="--delay: 6s;">
                <i class='bx bx-printer'></i>
            </div>
        </div>
    </div>

    <!-- Bootstrap and jQuery Scripts -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Third-party JS -->
    <script src="~/lib/sweetalert2/dist/sweetalert2.min.js"></script>

    <script>
        $(document).ready(function() {
            // Password toggle functionality
            $('.password-toggle').click(function() {
                const passwordInput = $(this).siblings('input[type="password"], input[type="text"]');
                const icon = $(this).find('i');

                if (passwordInput.attr('type') === 'password') {
                    passwordInput.attr('type', 'text');
                    icon.removeClass('bx-hide').addClass('bx-show');
                } else {
                    passwordInput.attr('type', 'password');
                    icon.removeClass('bx-show').addClass('bx-hide');
                }
            });

            // Form validation
            $('.needs-validation').on('submit', function(e) {
                if (!this.checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();
                }
                $(this).addClass('was-validated');
            });

            // Show success/error messages
            @if (TempData["SuccessMessage"] != null)
            {
                    <text>
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: '@TempData["SuccessMessage"]',
                        timer: 3000,
                        showConfirmButton: false
                    });
                    </text>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                    <text>
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: '@TempData["ErrorMessage"]',
                        timer: 3000,
                        showConfirmButton: false
                    });
                    </text>
            }

            @if (TempData["InfoMessage"] != null)
            {
                    <text>
                    Swal.fire({
                        icon: 'info',
                        title: 'Info',
                        text: '@TempData["InfoMessage"]',
                        timer: 3000,
                        showConfirmButton: false
                    });
                    </text>
            }

            // Show validation errors
            @if (!ViewData.ModelState.IsValid)
            {
                    var errors = ViewData.ModelState.Where(x => x.Value.Errors.Count > 0)
                            .Select(x => x.Value.Errors.First().ErrorMessage).ToList();
                    if (errors.Any())
                    {
                            <text>
                            Swal.fire({
                                icon: 'error',
                                title: 'Login Failed',
                                text: '@errors.First()',
                                timer: 3000,
                                showConfirmButton: false
                            });
                            </text>
                    }
            }
        });
    </script>
</body>
</html>