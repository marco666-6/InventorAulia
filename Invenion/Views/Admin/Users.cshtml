@model List<Invenion.Models.User>
@{
    ViewData["Title"] = "User Management";
}

<div class="users-container">
    <!-- Page Header -->
    <div class="page-header">
        <div class="page-title">
            <h1>User Management</h1>
            <p class="text-muted">Manage system users and their permissions</p>
        </div>
        <div class="page-actions">
            <a href="@Url.Action("PendingRegistrations")" class="btn btn-warning">
                <i class='bx bx-time' style="color: #03C03C;"></i>
                Pending Registrations
            </a>
        </div>
    </div>

    <!-- Users Table -->
    <div class="card">
        <div class="card-header">
            <h5 class="card-title mb-0">All Users</h5>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover" id="usersTable">
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>Full Name</th>
                                <th>Email</th>
                                <th>Department</th>
                                <th>Role</th>
                                <th>Status</th>
                                <th>Created Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in Model)
                            {
                                <tr>
                                    <td>
                                        <div class="user-info">
                                            <div class="user-avatar">
                                                @user.FullName.Substring(0, 1).ToUpper()
                                            </div>
                                            <span>@user.Username</span>
                                        </div>
                                    </td>
                                    <td>@user.FullName</td>
                                    <td>@user.Email</td>
                                    <td>@(user.Department ?? "N/A")</td>
                                    <td>
                                        <span class="badge bg-@(user.Role == "Admin" ? "danger" : "primary")">
                                            @user.Role
                                        </span>
                                    </td>
                                    <td>
                                        @if (user.IsApproved && user.IsActive)
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else if (!user.IsApproved)
                                        {
                                            <span class="badge bg-warning">Pending Approval</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inactive</span>
                                        }
                                    </td>
                                    <td>@user.CreatedDate.ToString("MMM dd, yyyy")</td>
                                    <td>
                                        <div class="btn-group d-flex flex-column justify-content-center align-items-center align-middle text-center gap-2">
                                            @if (!user.IsApproved && user.IsActive)
                                            {
                                                <button class="btn btn-sm btn-success" onclick="approveUser(@user.UserID, '@user.FullName')">
                                                    <i class='bx bx-check'></i>
                                                </button>
                                            }
                                            @if (user.IsActive)
                                            {
                                                <button class="btn btn-sm btn-warning" onclick="deactivateUser(@user.UserID, '@user.FullName')">
                                                    <i class='bx bx-block'></i>
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-sm btn-custom-info" onclick="activateUser(@user.UserID, '@user.FullName')">
                                                    <i class='bx bx-check-circle'></i>
                                                </button>
                                            }
                                            <button class="btn btn-sm btn-danger" onclick="deleteUser(@user.UserID, '@user.FullName')">
                                                <i class='bx bx-trash'></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="empty-state">
                    <i class='bx bx-user'></i>
                    <h5>No Users Found</h5>
                    <p>There are no users in the system yet.</p>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .users-container {
        padding: 20px;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }

    .page-title h1 {
        font-size: 2rem;
        font-weight: 600;
        color: #003200;
        margin-bottom: 5px;
    }

    .card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        border: none;
    }

    .card-header {
        background: transparent;
        border-bottom: 1px solid #eee;
        padding: 20px 25px;
    }

    .card-body {
        padding: 25px;
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .user-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: linear-gradient(135deg, #006A4E 0%, #00CC99 100%);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 14px;
    }

    .table {
        margin-bottom: 0;
    }

        .table th {
            border-top: none;
            font-weight: 600;
            color: #495057;
            background-color: #f8f9fa;
        }

        .table td {
            vertical-align: middle;
            border-top: 1px solid #eee;
        }

    .table-hover tbody tr:hover {
        background-color: rgba(0,0,0,0.02);
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.35em 0.65em;
    }

        /* Custom primary badge color */
        .badge.bg-primary {
            background-color: #006A4E !important;
        }

    /* Custom info button for activate user */
    .btn-custom-info {
        color: #fff;
        background-color: #00CC99;
        border-color: #00CC99;
    }

        .btn-custom-info:hover {
            color: #fff;
            background-color: #03C03C;
            border-color: #03C03C;
        }

        .btn-custom-info:focus, .btn-custom-info.focus {
            color: #fff;
            background-color: #03C03C;
            border-color: #03C03C;
            box-shadow: 0 0 0 0.2rem rgba(0, 204, 153, 0.5);
        }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #6c757d;
    }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .empty-state h5 {
            margin-bottom: 10px;
            color: #495057;
        }

    /* Custom SweetAlert2 button colors */
    .swal2-confirm {
        background-color: #006A4E !important;
        border-color: #006A4E !important;
    }

        .swal2-confirm:hover {
            background-color: #003200 !important;
            border-color: #003200 !important;
        }

    /* DataTables custom styling */
    .dataTables_wrapper .dataTables_length select,
    .dataTables_wrapper .dataTables_filter input {
        border: 1px solid #ddd;
        border-radius: 6px;
        padding: 6px 12px;
    }

        .dataTables_wrapper .dataTables_filter input:focus {
            border-color: #006A4E;
            box-shadow: 0 0 0 0.2rem rgba(0, 106, 78, 0.25);
            outline: none;
        }

    .dataTables_wrapper .dataTables_paginate .paginate_button.current {
        background: #006A4E !important;
        border: 1px solid #006A4E !important;
        color: white !important;
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
        background: #00CC99 !important;
        border: 1px solid #00CC99 !important;
        color: white !important;
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function() {
            $('#usersTable').DataTable({
                "paging": true,
                "ordering": true,
                "info": false,
                "scrollX": false,
                "searching": true,
                "lengthChange": true,
                "fixedHeader": true,
                "initComplete": function (settings, json) {
                    $("#usersTable").wrap("<div style='overflow:auto; width:100%;position:relative;'></div>");
                },
            });
        });

        function approveUser(userId, userName) {
            Swal.fire({
                title: 'Approve User Registration?',
                text: `Are you sure you want to approve ${userName}'s registration?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#006A4E',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, approve it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Create a form and submit it
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '@Url.Action("ApproveRegistration", "Admin")';

                    const userIdInput = document.createElement('input');
                    userIdInput.type = 'hidden';
                    userIdInput.name = 'userId';
                    userIdInput.value = userId;

                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = $('input[name="__RequestVerificationToken"]').val();

                    form.appendChild(userIdInput);
                    form.appendChild(tokenInput);
                    document.body.appendChild(form);
                    form.submit();
                }
            });
        }

        function deactivateUser(userId, userName) {
            Swal.fire({
                title: 'Deactivate User?',
                text: `Are you sure you want to deactivate ${userName}?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#ffc107',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, deactivate!'
            }).then((result) => {
                @* if (result.isConfirmed) {
                    Swal.fire(
                        'Feature Coming Soon!',
                        'User deactivation functionality will be implemented soon.',
                        'info'
                    );
                } *@
                if (result.isConfirmed) {
                    // Create a form and submit it
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '@Url.Action("DeactivateUser", "Admin")';

                    const userIdInput = document.createElement('input');
                    userIdInput.type = 'hidden';
                    userIdInput.name = 'userId';
                    userIdInput.value = userId;

                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = $('input[name="__RequestVerificationToken"]').val();

                    form.appendChild(userIdInput);
                    form.appendChild(tokenInput);
                    document.body.appendChild(form);
                    form.submit();
                }
            });
        }

        function activateUser(userId, userName) {
            Swal.fire({
                title: 'Activate User?',
                text: `Are you sure you want to activate ${userName}?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#00CC99',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, activate!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Create a form and submit it
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '@Url.Action("ActivateUser", "Admin")';

                    const userIdInput = document.createElement('input');
                    userIdInput.type = 'hidden';
                    userIdInput.name = 'userId';
                    userIdInput.value = userId;

                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = $('input[name="__RequestVerificationToken"]').val();

                    form.appendChild(userIdInput);
                    form.appendChild(tokenInput);
                    document.body.appendChild(form);
                    form.submit();
                }
            });
        }

        function deleteUser(userId, userName) {
            Swal.fire({
                title: 'Delete User?',
                text: `Are you sure you want to delete ${userName}?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#00CC99',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, delete!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Create a form and submit it
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '@Url.Action("DeleteUser", "Admin")';

                    const userIdInput = document.createElement('input');
                    userIdInput.type = 'hidden';
                    userIdInput.name = 'userId';
                    userIdInput.value = userId;

                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = $('input[name="__RequestVerificationToken"]').val();

                    form.appendChild(userIdInput);
                    form.appendChild(tokenInput);
                    document.body.appendChild(form);
                    form.submit();
                }
            });
        }
    </script>
}