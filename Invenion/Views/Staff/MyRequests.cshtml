@model List<Invenion.Models.BorrowingRequest>
@{
    ViewData["Title"] = "My Requests";
    Layout = "~/Views/Shared/_LayoutStaff.cshtml";
}

<div class="requests-container">
    <!-- Page Header -->
    <div class="page-header">
        <div class="page-title">
            <h1>My Requests</h1>
            <p class="text-muted">Track all your equipment borrowing requests</p>
        </div>
        <div class="page-actions">
            <a href="@Url.Action("SubmitRequest", "Staff")" class="btn btn-primary">
                <i class='bx bx-plus'></i> New Request
            </a>
        </div>
    </div>

    <!-- Requests Table -->
    <div class="card">
        <div class="card-body">
            @if (Model != null && Model.Any())
            {
                <div class="table-responsive">
                    <table id="requestsTable" class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Request ID</th>
                                <th>Equipment</th>
                                <th>Request Date</th>
                                <th>Start Date</th>
                                <th>End Date</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var request in Model)
                            {
                                <tr>
                                    <td>
                                        <span class="fw-bold text-primary">#@request.RequestID</span>
                                    </td>
                                    <td>
                                        <div class="equipment-info">
                                            <div class="fw-semibold">@request.EquipmentName</div>
                                            <small class="text-muted">@request.EquipmentCode</small>
                                            @if (!string.IsNullOrEmpty(request.Brand))
                                            {
                                                <small class="text-muted">- @request.Brand @request.Model</small>
                                            }
                                        </div>
                                    </td>
                                    <td>@request.RequestDate.ToString("MMM dd, yyyy")</td>
                                    <td>@request.RequestedStartDate.ToString("MMM dd, yyyy")</td>
                                    <td>@request.RequestedEndDate.ToString("MMM dd, yyyy")</td>
                                    <td>
                                        @switch (request.Status)
                                        {
                                            case "Pending":
                                                <span class="badge bg-warning">
                                                    <i class='bx bx-time'></i> Pending
                                                </span>
                                                break;
                                            case "Approved":
                                                <span class="badge bg-success">
                                                    <i class='bx bx-check'></i> Approved
                                                </span>
                                                break;
                                            case "Rejected":
                                                <span class="badge bg-danger">
                                                    <i class='bx bx-x'></i> Rejected
                                                </span>
                                                break;
                                            case "Borrowed":
                                                <span class="badge bg-info">
                                                    <i class='bx bx-package'></i> Borrowed
                                                </span>
                                                break;
                                            case "Returned":
                                                <span class="badge bg-secondary">
                                                    <i class='bx bx-check-circle'></i> Returned
                                                </span>
                                                break;
                                            case "Overdue":
                                                <span class="badge bg-danger">
                                                    <i class='bx bx-error'></i> Overdue
                                                </span>
                                                break;
                                            case "Cancelled":
                                                <span class="badge bg-secondary">
                                                    <i class='bx bx-x-circle'></i> Cancelled
                                                </span>
                                                break;
                                            default:
                                                <span class="badge bg-light text-dark">@request.Status</span>
                                                break;
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a href="@Url.Action("RequestDetails", "Staff", new { id = request.RequestID })" 
                                               class="btn btn-sm btn-outline-primary" title="View Details">
                                                <i class='bx bx-show'></i>
                                            </a>
                                            @if (request.Status == "Pending")
                                            {
                                                <button class="btn btn-sm btn-outline-danger" 
                                                        onclick="cancelRequest(@request.RequestID)" title="Cancel Request">
                                                    <i class='bx bx-x'></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="empty-state">
                    <div class="empty-icon">
                        <i class='bx bx-receipt'></i>
                    </div>
                    <h3>No Requests Yet</h3>
                    <p class="text-muted">You haven't made any equipment borrowing requests yet. Start by browsing available equipment.</p>
                    <div class="mt-3">
                        <a href="@Url.Action("Equipment", "Staff")" class="btn btn-primary">
                            <i class='bx bx-package'></i> Browse Equipment
                        </a>
                        <a href="@Url.Action("SubmitRequest", "Staff")" class="btn btn-outline-primary ms-2">
                            <i class='bx bx-plus'></i> Submit Request
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .requests-container {
        padding: 20px;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }

    .page-title h1 {
        font-size: 2rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 5px;
    }

    .card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        border: none;
    }

    .card-body {
        padding: 25px;
    }

    .table {
        margin-bottom: 0;
    }

    .table th {
        border-top: none;
        font-weight: 600;
        color: #495057;
        background-color: #f8f9fa;
        padding: 15px;
    }

    .table td {
        padding: 15px;
        vertical-align: middle;
    }

    .equipment-info {
        line-height: 1.4;
    }

    .badge {
        display: inline-flex;
        align-items: center;
        gap: 4px;
        padding: 6px 10px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .btn-group .btn {
        border-radius: 6px;
        margin-right: 5px;
    }

    .btn-group .btn:last-child {
        margin-right: 0;
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
    }

    .empty-icon {
        font-size: 4rem;
        color: #dee2e6;
        margin-bottom: 20px;
    }

    .empty-state h3 {
        color: #495057;
        margin-bottom: 10px;
    }

    .empty-state p {
        font-size: 1.1rem;
        margin-bottom: 25px;
    }

    /* DataTable Styling */
    .dataTables_wrapper .dataTables_length,
    .dataTables_wrapper .dataTables_filter {
        margin-bottom: 20px;
    }

    .dataTables_wrapper .dataTables_info,
    .dataTables_wrapper .dataTables_paginate {
        margin-top: 20px;
    }

    .page-link {
        border-radius: 6px;
        margin: 0 2px;
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function() {
            $('#requestsTable').DataTable({
                responsive: true,
                pageLength: 10,
                order: [[2, 'desc']], // Sort by request date descending
                language: {
                    search: "Search requests:",
                    lengthMenu: "Show _MENU_ requests per page",
                    info: "Showing _START_ to _END_ of _TOTAL_ requests",
                    infoEmpty: "No requests found",
                    zeroRecords: "No matching requests found"
                }
            });
        });

        function cancelRequest(requestId) {
            Swal.fire({
                title: 'Cancel Request',
                text: 'Are you sure you want to cancel this request? This action cannot be undone.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, cancel request',
                cancelButtonText: 'Keep request'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Create a form and submit it
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '@Url.Action("CancelRequest", "Staff")';
                    
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'requestId';
                    input.value = requestId;
                    
                    const token = document.createElement('input');
                    token.type = 'hidden';
                    token.name = '__RequestVerificationToken';
                    token.value = $('input[name="__RequestVerificationToken"]').val();
                    
                    form.appendChild(input);
                    form.appendChild(token);
                    document.body.appendChild(form);
                    form.submit();
                }
            });
        }
    </script>
}