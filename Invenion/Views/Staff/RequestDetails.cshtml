@model Invenion.Models.BorrowingRequest
@{
    ViewData["Title"] = "Request Details";
    Layout = "~/Views/Shared/_LayoutStaff.cshtml";
}

<div class="request-details-container">
    <!-- Page Header -->
    <div class="page-header">
        <div class="page-title">
            <h1>Request Details</h1>
            <p class="text-muted">Request #@Model.RequestID</p>
        </div>
        <div class="page-actions">
            <a href="@Url.Action("MyRequests", "Staff")" class="btn btn-outline-secondary">
                <i class='bx bx-arrow-back'></i> Back to Requests
            </a>
            @if (Model.Status == "Pending")
            {
                <button class="btn btn-danger ms-2" onclick="cancelRequest(@Model.RequestID)">
                    <i class='bx bx-x'></i> Cancel Request
                </button>
            }
        </div>
    </div>

    <!-- Request Information Cards -->
    <div class="row g-4">
        <!-- Basic Information -->
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class='bx bx-info-circle me-2'></i>Request Information
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="info-item">
                                <label class="info-label">Request ID</label>
                                <div class="info-value">#@Model.RequestID</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <label class="info-label">Request Date</label>
                                <div class="info-value">@Model.RequestDate.ToString("MMMM dd, yyyy 'at' hh:mm tt")</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <label class="info-label">Requested Start Date</label>
                                <div class="info-value">@Model.RequestedStartDate.ToString("MMMM dd, yyyy")</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <label class="info-label">Requested End Date</label>
                                <div class="info-value">@Model.RequestedEndDate.ToString("MMMM dd, yyyy")</div>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="info-item">
                                <label class="info-label">Purpose</label>
                                <div class="info-value">@Model.Purpose</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Equipment Information -->
            <div class="card mt-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class='bx bx-package me-2'></i>Equipment Details
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="info-item">
                                <label class="info-label">Equipment Code</label>
                                <div class="info-value">@Model.EquipmentCode</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <label class="info-label">Equipment Name</label>
                                <div class="info-value">@Model.EquipmentName</div>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(Model.Brand))
                        {
                            <div class="col-md-6">
                                <div class="info-item">
                                    <label class="info-label">Brand</label>
                                    <div class="info-value">@Model.Brand</div>
                                </div>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(Model.Model))
                        {
                            <div class="col-md-6">
                                <div class="info-item">
                                    <label class="info-label">Model</label>
                                    <div class="info-value">@Model.Model</div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Additional Information (if exists) -->
            @if (Model.Status != "Pending" || !string.IsNullOrEmpty(Model.Notes))
            {
                <div class="card mt-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class='bx bx-note me-2'></i>Additional Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            @if (Model.ApprovedDate.HasValue)
                            {
                                <div class="col-md-6">
                                    <div class="info-item">
                                        <label class="info-label">Approved Date</label>
                                        <div class="info-value">@Model.ApprovedDate.Value.ToString("MMMM dd, yyyy 'at' hh:mm tt")</div>
                                    </div>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(Model.ApprovedByName))
                            {
                                <div class="col-md-6">
                                    <div class="info-item">
                                        <label class="info-label">Approved By</label>
                                        <div class="info-value">@Model.ApprovedByName</div>
                                    </div>
                                </div>
                            }
                            @if (Model.ActualStartDate.HasValue)
                            {
                                <div class="col-md-6">
                                    <div class="info-item">
                                        <label class="info-label">Actual Start Date</label>
                                        <div class="info-value">@Model.ActualStartDate.Value.ToString("MMMM dd, yyyy")</div>
                                    </div>
                                </div>
                            }
                            @if (Model.ActualEndDate.HasValue)
                            {
                                <div class="col-md-6">
                                    <div class="info-item">
                                        <label class="info-label">Actual End Date</label>
                                        <div class="info-value">@Model.ActualEndDate.Value.ToString("MMMM dd, yyyy")</div>
                                    </div>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(Model.RejectionReason))
                            {
                                <div class="col-12">
                                    <div class="info-item">
                                        <label class="info-label">Rejection Reason</label>
                                        <div class="info-value text-danger">@Model.RejectionReason</div>
                                    </div>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(Model.ReturnCondition))
                            {
                                <div class="col-12">
                                    <div class="info-item">
                                        <label class="info-label">Return Condition</label>
                                        <div class="info-value">@Model.ReturnCondition</div>
                                    </div>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(Model.Notes))
                            {
                                <div class="col-12">
                                    <div class="info-item">
                                        <label class="info-label">Notes</label>
                                        <div class="info-value">@Model.Notes</div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Status Card -->
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class='bx bx-flag me-2'></i>Request Status
                    </h5>
                </div>
                <div class="card-body text-center">
                    <div class="status-badge-large">
                        @switch (Model.Status)
                        {
                            case "Pending":
                                <div class="status-icon bg-warning">
                                    <i class='bx bx-time'></i>
                                </div>
                                <h4 class="status-text text-warning">Pending Approval</h4>
                                <p class="text-muted">Your request is waiting for admin approval.</p>
                                break;
                            case "Approved":
                                <div class="status-icon bg-success">
                                    <i class='bx bx-check'></i>
                                </div>
                                <h4 class="status-text text-success">Approved</h4>
                                <p class="text-muted">Your request has been approved. Equipment is ready for pickup.</p>
                                break;
                            case "Rejected":
                                <div class="status-icon bg-danger">
                                    <i class='bx bx-x'></i>
                                </div>
                                <h4 class="status-text text-danger">Rejected</h4>
                                <p class="text-muted">Your request has been rejected by the admin.</p>
                                break;
                            case "Borrowed":
                                <div class="status-icon bg-info">
                                    <i class='bx bx-package'></i>
                                </div>
                                <h4 class="status-text text-info">Currently Borrowed</h4>
                                <p class="text-muted">Equipment is currently in your possession.</p>
                                break;
                            case "Returned":
                                <div class="status-icon bg-secondary">
                                    <i class='bx bx-check-circle'></i>
                                </div>
                                <h4 class="status-text text-secondary">Returned</h4>
                                <p class="text-muted">Equipment has been successfully returned.</p>
                                break;
                            case "Overdue":
                                <div class="status-icon bg-danger">
                                    <i class='bx bx-error'></i>
                                </div>
                                <h4 class="status-text text-danger">Overdue</h4>
                                <p class="text-muted">Equipment return is overdue. Please return immediately.</p>
                                break;
                            case "Cancelled":
                                <div class="status-icon bg-secondary">
                                    <i class='bx bx-x-circle'></i>
                                </div>
                                <h4 class="status-text text-secondary">Cancelled</h4>
                                <p class="text-muted">This request has been cancelled.</p>
                                break;
                            default:
                                <div class="status-icon bg-light">
                                    <i class='bx bx-question'></i>
                                </div>
                                <h4 class="status-text text-dark">@Model.Status</h4>
                                break;
                        }
                    </div>
                </div>
            </div>

            <!-- Duration Info -->
            <div class="card mt-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class='bx bx-calendar me-2'></i>Duration
                    </h5>
                </div>
                <div class="card-body text-center">
                    <div class="duration-info">
                        @{
                            var duration = (Model.RequestedEndDate - Model.RequestedStartDate).Days;
                        }
                        <div class="duration-number">@duration</div>
                        <div class="duration-label">Day@(duration != 1 ? "s" : "")</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .request-details-container {
        padding: 20px;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }

    .page-title h1 {
        font-size: 2rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 5px;
    }

    .card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        border: none;
    }

    .card-header {
        background: transparent;
        border-bottom: 1px solid #eee;
        padding: 20px 25px;
    }

    .card-body {
        padding: 25px;
    }

    .info-item {
        margin-bottom: 15px;
    }

    .info-label {
        font-size: 0.9rem;
        font-weight: 500;
        color: #6c757d;
        margin-bottom: 5px;
        display: block;
    }

    .info-value {
        font-size: 1rem;
        color: #495057;
        font-weight: 500;
        background: #f8f9fa;
        padding: 8px 12px;
        border-radius: 6px;
        border-left: 3px solid #667eea;
    }

    .status-badge-large {
        padding: 20px;
    }

    .status-icon {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px;
    }

    .status-icon i {
        font-size: 2.5rem;
        color: white;
    }

    .status-text {
        font-weight: 600;
        margin-bottom: 10px;
    }

    .duration-info {
        padding: 20px;
    }

    .duration-number {
        font-size: 3rem;
        font-weight: 700;
        color: #667eea;
        line-height: 1;
    }

    .duration-label {
        font-size: 1.1rem;
        color: #6c757d;
        font-weight: 500;
        margin-top: 5px;
    }
</style>

@section Scripts {
    <script>
        function cancelRequest(requestId) {
            Swal.fire({
                title: 'Cancel Request',
                text: 'Are you sure you want to cancel this request? This action cannot be undone.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, cancel request',
                cancelButtonText: 'Keep request'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Create a form and submit it
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '@Url.Action("CancelRequest", "Staff")';
                    
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'requestId';
                    input.value = requestId;
                    
                    const token = document.createElement('input');
                    token.type = 'hidden';
                    token.name = '__RequestVerificationToken';
                    token.value = $('input[name="__RequestVerificationToken"]').val();
                    
                    form.appendChild(input);
                    form.appendChild(token);
                    document.body.appendChild(form);
                    form.submit();
                }
            });
        }
    </script>
}